{
  "invalid_data": "Invalid data",
  "required_field": "This field is required",
  "invalid_url": "Invalid URL format",
  "unauthorized": "You are not authorized to access this API.",
  "error_detail": "Error validating input data",
  "product": {
    "createSuccess": "Product created successfully",
    "createFailure": "Error while creating product",
    "updateSuccess": "Product updated successfully",
    "updateFailure": "Error while updating product",
    "deleteSuccess": "Product deleted successfully",
    "deleteFailure": "Error while deleting product",
    "getAllSuccess": "Get products successfully",
    "getAllFailure": "Error while getting products",
    "getOneSuccess": "Get Product info successfully",
    "getOneFailure": "Error while getting Product",
    "notFound": "Product not found",
    "error.name.required": "Product name is required",
    "error.title.required": "Product title is required",
    "error.slug.required": "Product slug is required",
    "error.price.required": "Price is required",
    "error.price.invalid_number": "Invalid product price",
    "error.categoryId.required": "Category ID is required",
    "existing": "Product already exists",
    "softDelete": "Product has been soft deleted",
    "hardDelete": "Product has been hard deleted",
    "errorDelete": "Error while deleting product",
    "exceptionDelete": "An error occurred during product deletion"
  },
  "categories": {
    "createSuccess": "Category created successfully",
    "createFailure": "Error while creating category",
    "updateSuccess": "Category updated successfully",
    "updateFailure": "Error while updating category",
    "deleteSuccess": "Category deleted successfully",
    "deleteFailure": "Error while deleting category",
    "getAllSuccess": "Get categories successfully",
    "getAllFailure": "Error while getting categories",
    "getFailure": "error while getting category",
    "getOneSuccess": "Get category info successfully",
    "getOneFailure": "Error while getting category",
    "getChildrenSuccess": "Get child categories successfully",
    "getChildrenFailure": "Error while getting child categories",
    "notFound": "Category not found",
    "error.name.required": "Category name cannot be empty",
    "error.slug.required": "Category slug cannot be empty",
    "error.index.invalid_number": "index is number not string",
    "error.order.invalid_number": "order is number not string",
    "error.createUser.invalid_number": "createUser is number not string",
    "error.userUpdate.invalid_number": "userUpdate is number not string",
    "uploadFailed": "Error occurred while uploading image"
  },
  "productPromotion": {
      "error.promotion_id.required": "Promotion ID is required",
      "error.priceSale_promotion.min": "Promotion sale price must be >= 0",
      "error.sale_promotion.min": "Discount value must be >= 0",
      "error.sale_promotion.max": "Discount value must not exceed 100",
      "error.quantity_promotion.int": "Quantity must be an integer",
      "error.quantity_promotion.min": "Quantity must be >= 0",
      "error.sold.int": "Sold quantity must be an integer",
      "error.sold.min": "Sold quantity must be >= 0",
      "createFailure": "Can't create productPromotion",
      "updateSuccess": "Save productPromotion success",
      "existing": "Promotions already exist for this product",
      "deleteFailed": "product deletion failed",
      "notFound": "Product notfound",
      "saveFailed": "Failed to create or update product",
      "getListSuccess": "Get list products success",
      "getListFailure": "Get list products failed"
  },
  "promotion": {
    "error.name.required": "Promotion name cannot be empty",
    "error.type.required": "Promotion type cannot be empty",
    "error.banner_img.url": "Banner must be a valid URL",
    "error.logo_img.url": "Icon must be a valid URL",
    "error.start_time.datetime": "Start time is invalid",
    "error.end_time.datetime": "End time is invalid",
    "error.tenantId.int": "TenantId must be an integer",
    "error.codeName.required": "codeName cannot be empty",
    "createFailure": "Can't create promotion",
    "existing": "existing",
    "notFound": "Promotion not found",
    "isDelete": "This promotion is no longer valid",
    "expire": "This promotion has expired",
    "nonStart": "This promotion has not started yet",
    "overPass": "Exceeded the quantity limit, remaining quantity for this promotion is",
    "buying": "products for this promotion, you have already purchased",
    "allowBuy": "Only allowed to purchase",
    "buyLimit": "Exceeding the allowed purchase quantity, only maximum purchase allowed",
    "product": "products",
    "getPromotionError": "An error occurred during distribution",
    "createSuccess": "Promotion created successfully",
    "updateSuccess": "Promotion updated successfully",
    "updateFailure": "Error while updating Promotion",
    "deleteSuccess": "Promotion deleted successfully",
    "deleteFailure": "Error while deleting Promotion",
    "getAllSuccess": "Get categories successfully",
    "getAllFailure": "Error while getting categories",
    "getFailure": "error while getting Promotion",
    "getSuccess": "Get Promotion info successfully",
    "verifySuccess": "Promotion verified success"
  },
  "promotionUserLimit": {
    "promotion_id": "Please enter promotion ID",
    "phone": "Please enter phone number",
    "amount": "Amount must be an integer"
  },
   "cart": {
    "createFailure": "Failed to create cart. Please try again later.",
    "createSuccess": "Cart has been created successfully.",
    "updateSuccess": "Cart has been updated successfully.",
    "updateFailure": "Failed to update cart. Please try again.",
    "existing": "This cart already exists.",
    "deleteFailed": "Failed to delete cart. Please try again.",
    "deleteSuccess": "Cart has been deleted successfully.",
    "notFound": "Cart not found.",
    "getListSuccess": "Cart list retrieved successfully.",
    "getListFailure": "Failed to retrieve cart list.",
    "getSuccess": "Cart retrieved successfully.",
    "getFailure": "Failed to retrieve cart."
  },
  "wishlist": {
    "createFailure": "Failed to create wishlist. Please try again.",
    "createSuccess": "Wishlist has been created successfully.",
    "existing": "This wishlist already exists.",
    "deleteFailed": "Failed to delete wishlist. Please try again.",
    "deleteSuccess": "Wishlist has been deleted successfully.",
    "notFound": "Wishlist not found.",
    "getListSuccess": "Wishlist retrieved successfully.",
    "getListFailure": "Failed to retrieve wishlist."
  },
   "categoryGroup": {
    "createFailure": "Failed to create category group. Please try again.",
    "createSuccess": "category group has been created successfully.",
    "existing": "This category group already exists.",
    "deleteFailed": "Failed to delete category group. Please try again.",
    "deleteSuccess": "category group has been deleted successfully.",
    "notFound": "category group not found.",
    "getAllSuccess": "category group retrieved successfully.",
    "getAllFailure": "Failed to retrieve category group.",
    "getOneSuccess": "Get category group successfully.",
    "getOneFailure": "Failed to get category group."
  }
}
